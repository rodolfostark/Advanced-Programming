#1 ----------------------------------------------------------------------------------------------------------------------------------------- 
	O uso de ponteiros é indispensável ao resolver quaisquer problemas de engenharia, pois em geral o problemas exigem programas de alto desempenho, então faz-se necessário o gerenciamento de memória; 
#2 ----------------------------------------------------------------------------------------------------------------------------------------- 
	int i=3,j=5;
	int *p, *q;
	p = &i;
	q = &j; 
	
	p == &i; -> 1 ou true;
	*p - *q; -> 3 - 5 = -2;
	**&p; -> 3;
	3 - *p/(*q) + 7; -> 3 - 3/(5) + 7 = 10;

#3 ----------------------------------------------------------------------------------------------------------------------------------------- 
	int i=5, *p;
	p = &i;
	printf("%x %d %d %d %d", p,*p+2,**&p,3**p,**&p+4);

saída: 4094 7 5 15 9

#4 ----------------------------------------------------------------------------------------------------------------------------------------- 
	int * p, * q, i, j;
	p = i;(Errado)
	q = &j;(Correto)
	p = &*&i;(Correto)
	i = (*&)j;(Errado)
	i = *&j;(Correto)
	i = *&*&j;(Correto)
	q = *p;(Errado)
	i = (*p)++ + *q;(Correto)

#5 ------------------------------------------------------------------------------------------------------------------------------------------ 
	int main() {
	  int    valor;
	  int   *p1;
	  float  temp;
	  float *p2;
	  char   aux;
	  char  *nome = "Ponteiros";
	  char  *p3;
	  int    idade;
	  int    vetor[3];
	  int   *p4;
	  int   *p5;

	  /* (a) */
	  valor = 10;
	  p1 = &valor;
	  *p1 = 20;
	  printf("%d \n", valor);
		saída: 20

	  /* (b) */
	  temp = 26.5;
	  p2 = &temp;
	  *p2 = 29.0;
	  printf("%.1f \n", temp);
		saída:29.0
	  /* (c) */
	  p3 = &nome[0];
	  aux = *p3;
	  printf("%c \n", aux);
		saída: P

	  /* (d) */
	  p3 = &nome[4];
	  aux = *p3;
	  printf("%c \n", aux);
		saída: e

	  /* (e) */
	  p3 = nome;
	  printf("%c \n", *p3);
		saída: P

	  /* (f) */
	  p3 = p3 + 4;
	  printf("%c \n", *p3);
		saída: e

	  /* (g) */
	  p3--;
	  printf("%c \n", *p3);
		saída: t
	  /* (h) */
	  vetor[0] = 31;
	  vetor[1] = 45;
	  vetor[2] = 27;
	  p4 = vetor;
	  idade = *p4;
	  printf("%d \n", idade);
		saída: 31
	  /* (i) */
	  p5 = p4 + 1;
	  idade = *p5;
	  printf("%d \n", idade);
		saída: 45

	  /* (j) */
	  p4 = p5 + 1;
	  idade = *p4;
	  printf("%d \n", idade);
		saída: 27
	  /* (l) */
	  p4 = p4 - 2;
	  idade = *p4;
	  printf("%d \n", idade);
		saída: 31
	  /* (m) */
	  p5 = &vetor[2] - 1;
	  printf("%d \n", *p5);
		saída: 45
	  /* (n) */
	  p5++;
	  printf("%d \n", *p5);
		saída: 27
	  return(0);
	}
#6 ------------------------------------------------------------------------------------------------------------------------------------------
	  int main(void){
	  float vet[5] = {1.1,2.2,3.3,4.4,5.5};
	  float *f;
	  int i;
	  f = vet;
	  printf("contador/valor/valor/endereco/endereco");
	  for(i = 0 ; i <= 4 ; i++){
	    printf("\ni = %d",i);
	    printf("vet[%d] = %.1f",i, vet[i]);
	    printf("*(f + %d) = %.1f",i, *(f+i));
	    printf("&vet[%d] = %X",i, &vet[i]);
	    printf("(f + %d) = %X",i, f+i);
	  }
	}
	saída:
	1ª iteração
	 	0
	        vet[0] = 1.1
		*(f + 0) = 1.1
		&vet[0] = EndereçoDeVet[0]
		(f + 0) = EndereçoDeF
		

